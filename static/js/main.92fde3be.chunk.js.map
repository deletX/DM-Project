{"version":3,"sources":["logo.svg","routes.jsx","App.js","constants/constants.js","serviceWorker.js","reducers/index.js","store.js","index.js"],"names":["module","exports","createBrowserHistory","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","logo","maxHeight","success","response","console","log","failure","App","classes","className","AppBar","position","color","Toolbar","src","alt","Typography","variant","Button","onSuccess","onFailure","clientId","isSignedIn","Boolean","window","location","hostname","match","combineReducers","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","history","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,uICO3BC,c,wDCSVC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdK,KAAM,CACFC,UAAW,QAIbC,EAAU,SAACC,GACbC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,IAGVG,EAAU,SAACH,GACbC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,IAwBDI,MArBf,WACI,IAAMC,EAAUjB,IAChB,OACI,yBAAKkB,UAAWD,EAAQd,MACpB,kBAACgB,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC5B,kBAACC,EAAA,EAAD,KACI,yBAAKC,IAAI,WAAWC,IAAI,OAAON,UAAWD,EAAQR,OAClD,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,KAAKR,UAAWD,EAAQT,QAI5C,kBAACmB,EAAA,EAAD,CAAQN,MAAM,WAAd,WAGR,kBAAC,IAAD,CAAaO,UAAWjB,EAASkB,UAAWd,EAASe,SCrDxC,2EDsDAC,YAAY,ME5CjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCfSC,cAAgB,ICGzBC,EAAa,CAACC,KAEdC,EAAmBP,OAAOQ,sCAAwCC,IAUzDC,EARMC,YACjBC,EAPiB,GASjBL,EACIM,IAAe,WAAf,EAAmBR,KCJrBS,EAAUhD,cAEhBiD,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,IAAMO,WAAP,KACI,kBAAC,IAAD,CAAQH,QAASA,GACb,kBAAC,EAAD,SAIZI,SAASC,eAAe,SH+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.92fde3be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\n\n// import requireAuth from \"./requireAuth\"; // deprecated\n\nimport {createBrowserHistory} from \"history\";\n\nconst history = createBrowserHistory();\n\n\nconst BaseRouter = props => (\n    <div>\n        <Switch>\n            {/*<Route exact path=\"/\">*/}\n            {/*    <LandingPageContainer/>*/}\n            {/*</Route>*/}\n            {/*<Route exact path=\"/login\">*/}\n            {/*    <AuthContainer>*/}\n            {/*        <LoginComponent/>*/}\n            {/*    </AuthContainer>*/}\n            {/*</Route>*/}\n            {/*<Route exact path=\"/signup\">*/}\n            {/*    <AuthContainer>*/}\n            {/*        <SignupComponent/>*/}\n            {/*    </AuthContainer>*/}\n            {/*</Route>*/}\n            {/*<Route exact path=\"/home\" component={HomeContainer}/>*/}\n            {/*<Route exact path=\"/profile/:id\" component={ProfileContainer}/>*/}\n            {/*<Route exact path=\"/my-profile\" component={MyProfileContainer}/>*/}\n            {/*<Route exact path=\"/events/:id\" component={EventContainer}/>*/}\n            {/*<Route path=\"*\" component={NotFound404}/>*/}\n        </Switch>\n    </div>\n);\n\nexport default BaseRouter;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BaseRouter from \"./routes\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/core/Menu\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport {StepIcon} from \"@material-ui/core\";\nimport Icon from \"@material-ui/core/Icon\";\nimport {scopes, serverURL, oauth2Client, CLIENT_ID} from \"./constants/constants\";\nimport GoogleLogin from \"react-google-login\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    logo: {\n        maxHeight: 75,\n    },\n}));\n\nconst success = (response) => {\n    console.log(\"SUCCESS\");\n    console.log(response);\n};\n\nconst failure = (response) => {\n    console.log(\"FAILURE\");\n    console.log(response);\n};\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" color=\"default\">\n                <Toolbar>\n                    <img src=\"logo.svg\" alt=\"logo\" className={classes.logo}/>\n                    <Typography variant=\"h6\" className={classes.title}>\n                    </Typography>\n\n\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <GoogleLogin onSuccess={success} onFailure={failure} clientId={CLIENT_ID}\n                         isSignedIn={false}/>\n            {/*<BaseRouter/>*/}\n        </div>\n    )\n}\n\nexport default App;","import {home} from \"./pagesurls\";\n\nexport const CLIENT_ID = \"283420556311-30r26g3mtt5odkqmit6u7onam3qrul16.apps.googleusercontent.com\";\nexport const CLIENT_SECRET = \"KsSTbOaPDbxEbEGqkcyWl3-v\";\nexport const APP_CLIENTID = \"\";\nexport const APP_SECRET = \"\";\n\nexport const serverURL = \"http://localhost:8000/\";\n\nexport const status = [\n    'Joinable',\n    'Computing',\n    'Computed'\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\n\n\nexport default combineReducers({});","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(...middleware),\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createBrowserHistory} from \"history\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\"\nimport {Router} from \"react-router\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <Router history={history}>\n                <App/>\n            </Router>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}